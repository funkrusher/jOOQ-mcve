/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.mariadb.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.mariadb.Keys;
import org.jooq.mcve.java.mariadb.Mcve;
import org.jooq.mcve.java.mariadb.tables.Sub.SubPath;
import org.jooq.mcve.java.mariadb.tables.records.MainRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Main extends TableImpl<MainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.main</code>
     */
    public static final Main MAIN = new Main();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MainRecord> getRecordType() {
        return MainRecord.class;
    }

    /**
     * The column <code>mcve.main.mainId</code>.
     */
    public final TableField<MainRecord, Integer> MAINID = createField(DSL.name("mainId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.main.cd</code>.
     */
    public final TableField<MainRecord, Integer> CD = createField(DSL.name("cd"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mcve.main.mainJson</code>.
     */
    public final TableField<MainRecord, String> MAINJSON = createField(DSL.name("mainJson"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    private Main(Name alias, Table<MainRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Main(Name alias, Table<MainRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.main</code> table reference
     */
    public Main(String alias) {
        this(DSL.name(alias), MAIN);
    }

    /**
     * Create an aliased <code>mcve.main</code> table reference
     */
    public Main(Name alias) {
        this(alias, MAIN);
    }

    /**
     * Create a <code>mcve.main</code> table reference
     */
    public Main() {
        this(DSL.name("main"), null);
    }

    public <O extends Record> Main(Table<O> path, ForeignKey<O, MainRecord> childPath, InverseForeignKey<O, MainRecord> parentPath) {
        super(path, childPath, parentPath, MAIN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MainPath extends Main implements Path<MainRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MainPath(Table<O> path, ForeignKey<O, MainRecord> childPath, InverseForeignKey<O, MainRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MainPath(Name alias, Table<MainRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MainPath as(String alias) {
            return new MainPath(DSL.name(alias), this);
        }

        @Override
        public MainPath as(Name alias) {
            return new MainPath(alias, this);
        }

        @Override
        public MainPath as(Table<?> alias) {
            return new MainPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<MainRecord, Integer> getIdentity() {
        return (Identity<MainRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MainRecord> getPrimaryKey() {
        return Keys.KEY_MAIN_PRIMARY;
    }

    private transient SubPath _sub;

    /**
     * Get the implicit to-many join path to the <code>mcve.sub</code> table
     */
    public SubPath sub() {
        if (_sub == null)
            _sub = new SubPath(this, null, Keys.SUB_IBFK_1.getInverseKey());

        return _sub;
    }

    @Override
    public List<Check<MainRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("mainJson"), "json_valid(`mainJson`)", true)
        );
    }

    @Override
    public Main as(String alias) {
        return new Main(DSL.name(alias), this);
    }

    @Override
    public Main as(Name alias) {
        return new Main(alias, this);
    }

    @Override
    public Main as(Table<?> alias) {
        return new Main(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Main rename(String name) {
        return new Main(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Main rename(Name name) {
        return new Main(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Main rename(Table<?> name) {
        return new Main(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Main where(Condition condition) {
        return new Main(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Main where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Main where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Main where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Main where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Main where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Main where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Main where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Main whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Main whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
