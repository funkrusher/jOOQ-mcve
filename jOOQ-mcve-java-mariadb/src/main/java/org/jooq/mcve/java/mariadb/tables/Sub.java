/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.mariadb.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.mariadb.Indexes;
import org.jooq.mcve.java.mariadb.Keys;
import org.jooq.mcve.java.mariadb.Mcve;
import org.jooq.mcve.java.mariadb.tables.Main.MainPath;
import org.jooq.mcve.java.mariadb.tables.records.SubRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Sub extends TableImpl<SubRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.sub</code>
     */
    public static final Sub SUB = new Sub();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubRecord> getRecordType() {
        return SubRecord.class;
    }

    /**
     * The column <code>mcve.sub.subId</code>.
     */
    public final TableField<SubRecord, Integer> SUBID = createField(DSL.name("subId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.sub.mainId</code>.
     */
    public final TableField<SubRecord, Integer> MAINID = createField(DSL.name("mainId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mcve.sub.subJson</code>.
     */
    public final TableField<SubRecord, String> SUBJSON = createField(DSL.name("subJson"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    private Sub(Name alias, Table<SubRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sub(Name alias, Table<SubRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.sub</code> table reference
     */
    public Sub(String alias) {
        this(DSL.name(alias), SUB);
    }

    /**
     * Create an aliased <code>mcve.sub</code> table reference
     */
    public Sub(Name alias) {
        this(alias, SUB);
    }

    /**
     * Create a <code>mcve.sub</code> table reference
     */
    public Sub() {
        this(DSL.name("sub"), null);
    }

    public <O extends Record> Sub(Table<O> path, ForeignKey<O, SubRecord> childPath, InverseForeignKey<O, SubRecord> parentPath) {
        super(path, childPath, parentPath, SUB);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SubPath extends Sub implements Path<SubRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SubPath(Table<O> path, ForeignKey<O, SubRecord> childPath, InverseForeignKey<O, SubRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubPath(Name alias, Table<SubRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubPath as(String alias) {
            return new SubPath(DSL.name(alias), this);
        }

        @Override
        public SubPath as(Name alias) {
            return new SubPath(alias, this);
        }

        @Override
        public SubPath as(Table<?> alias) {
            return new SubPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SUB_MAINID);
    }

    @Override
    public Identity<SubRecord, Integer> getIdentity() {
        return (Identity<SubRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubRecord> getPrimaryKey() {
        return Keys.KEY_SUB_PRIMARY;
    }

    @Override
    public List<ForeignKey<SubRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUB_IBFK_1);
    }

    private transient MainPath _main;

    /**
     * Get the implicit join path to the <code>mcve.main</code> table.
     */
    public MainPath main() {
        if (_main == null)
            _main = new MainPath(this, Keys.SUB_IBFK_1, null);

        return _main;
    }

    @Override
    public List<Check<SubRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("subJson"), "json_valid(`subJson`)", true)
        );
    }

    @Override
    public Sub as(String alias) {
        return new Sub(DSL.name(alias), this);
    }

    @Override
    public Sub as(Name alias) {
        return new Sub(alias, this);
    }

    @Override
    public Sub as(Table<?> alias) {
        return new Sub(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sub rename(String name) {
        return new Sub(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sub rename(Name name) {
        return new Sub(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sub rename(Table<?> name) {
        return new Sub(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sub where(Condition condition) {
        return new Sub(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sub where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sub where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sub where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sub where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sub where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sub where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sub where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sub whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sub whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
